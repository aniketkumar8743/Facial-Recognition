# Import the Kivy dependencies 
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
#Import kivy UX components
from kivy.uix.image import Image
from kivy.uix.button import Button
from kivy.uix.label import Label
#Import other kivy stuff
from kivy.clock import Clock  # allows us update a class or real time images
from kivy.graphics.texture import Texture
from kivy.logger import Logger # some metrices it show that what is happening behind the scens

# Import other dependencies
import cv2
import tensorflow as tf
from layers import L1Dist
import os
import numpy as np

# Build app and layout
class CamApp(App):
  def build(self):
    # Main Layout components
    self.web_cam = Image(size_hint = (1,.8))
    self.button = Button(text="Verify", on_press = self.verify, size_hint=(1,.1))
    self.verification_label = Label(text="Verification Uninitiated",size_hint=(1,.1))

    # Add item to layout
    layout = BoxLayout(orientation='vertical')
    layout.add_widget(self.web_cam)
    layout.add_widget(self.button)
    layout.add_widget(self.verification_label)

    #Load tensorflow /keras model
    self.model = tf.keras.models.load_model('siamesemodel.h5',custom_objects={'L1Dist':L1Dist})

    # Setup video capture device
    self.capture = cv2.VideoCapture(0)
    Clock.schedule_interval(self.update, 1.0/33.0)

    return layout
  
  # Run continously to get webcame feed
  def update(self,*args):
    # reload frame from opencv
    ret, frame = self.capture.read()
    frame = frame[120:120+250, 200:200+250]

    # flip horizontall and convert image to texture
    buf = cv2.flip(frame,0).tostring() # this gone flip the image horizontally and convert that into string
    img_texture = Texture.create(size=(frame.shape[1],frame.shape[0]),colorfmt='bgr') 
    img_texture.blit_buffer(buf, colorfmt ='bgr',bufferfmt='ubyte') # convert the image into texture buffer
    self.web_cam.texture = img_texture

  #load preprocessing function
  def preprocess(self,file_path):
    # Read in image file path
    byte_img = tf.io.read_file(file_path)
    # Load in the images
    img = tf.io.decode_jpeg(byte_img)

    #Preprocessing steps - resizing the images to be 100x100x3
    img = tf.image.resize(img,(100,100))
    # Scaling image to be between 0 and 1
    img = img / 255.0

    #Return image
    return img

  # Verification function to verify person  
  def verify(self,*args):
    # specify thresholds
    detection_threshold = 0.5
    verification_threshold = 0.7

    # capture input image from our webcam
    SAVE_PATH = os.path.join('application_data','input_image','input_image.jpg')
    ret, frame = self.capture.read()
    frame = frame[120:120+250,200:200+250]
    cv2.imwrite(SAVE_PATH, frame)


    # Build results array
    results = []
    for image in os.listdir(os.path.join('application_data','verification_images')):
        input_img = self.preprocess(SAVE_PATH)
        validation_img = self.preprocess(os.path.join('application_data','verification_images',image))

        #Make Prediction
        result = self.model.predict(list(np.expand_dims([input_img,validation_img],axis=1)))
        results.append(result)

    #Detection threshold: Metric above with a prediction is considered positive
    detection = np.sum(np.array(results) > detection_threshold)

    #Verfication Threshold : Proportion of positive predictions / total positive samples
    verification = detection / len(os.listdir(os.path.join('application_data','verification_images')))
    verified = verification > verification_threshold

    # Set verification text
    self.verification_label.text = 'Verified' if verified == True else 'Unverified'

    
    # Log out details
    Logger.info(results)
    Logger.info(detection)
    Logger.info(verification)
    Logger.info(verified)

    
    return results, verified

if __name__ == '__main__':
  CamApp().run()
